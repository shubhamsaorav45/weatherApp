MODULES 
in modules--> javascript allow you to break up your code into seperate files.
es modules rely into import and export statement

use and purpose of render?
react render methods return html to the web page by using the function called render().

react hooks
react hooks allow us to hook the react feature such as state and lifecycle methods.
react allow the functional component to have access to the state and othe rreact features
There are 3 rules for hooks:

Hooks can only be called inside React function components.
Hooks can only be called at the top level of a component.
Hooks cannot be conditional

usestate hooks allow us to track the state in the functional componennt.
use sttae accept the initial state and returns the two value
1-->current value
2-->function the update the state



promise
promises are use to handle a asynchronous operation in javascript
what happen is like when we code multiple callbacks it lead our code 
to be very unmanageble code and not easy for the user to mange multiple call baclk

1--->hanle multiple asynchronous operation easily
promise hhas 3 state 
1>pending
2>resolve
3>reject

types ---.all([],.any[].resolve([]))


we have to create an object for calling promises 
then is envovked when promises are either rejected or resolbved
.catch for 
error resolving


Async/Await





event bubbling



useeffect it allow you to perfome side effect in your componennt

props-------
prop stsnads for proerties
props are used to pass the data from parent componenet to the child component in a react and
they are the main mechanishm for the componenet communicatkion


types of hooks are 
(basic)
1>usestate
2>useeffect
3>usecontext


react redux

react redux is a open source javascript library use to mange the state of the appliocation
react uses redux for buildinf=g the user interface



1---->it alow react component to read the data from redux store
data------>redux-store
2>----->and dispatch action to the store to update the data
redux provide sensible sclae way of data flow in uniddirectnal manner
components of redux   are:-


we have used combine reducer method to invoke as many method from the js file.
createcontext


Hoisting
in javascript hoisting is a behaviour of moving all the declaration at the top of scope before code execution.
javascript only hoists declaration,not the initialization;
even before the code strts executing memory is allocated to this all variable and function.
in case of fat arroew function it leads to give undefined value error becauysse it behaqve like an variabke 
so if we start putting the code upward and run it will throw an error or we can say if we initatize a 
output  before the actual function call it will throw error.


closeurs in javascript
a closeur is a inner function that has a access to the ojuter function variables.
function outer(){
    var a="thisis a outer function"
    console.log(a);
    function inner() {
        var b="this is  an innner funvtion"
        console.log(b);
        console.log(a);
        
    }
    inner();

    console.log(b);// cannot call the inner function in the outer fuction 
}
outer();


notes on ptromises code



  // const p1=new Promise((resolve,reject)=>{
  //   setTimeout(()=>{
  //      resolve(1);
  //     //reject(1)
  //   },2000)

  // })
 
  // const p2=new Promise((resolve,reject)=>{
  //   setTimeout(()=>{
  //      resolve(2);
  //     //reject(1)
  //   },3000)

  // })
 
  // p1.then(data=>{
  //   console.log(data);
  //   return p2;
  // }).then((data)=>{
  //   console.log(data);
  //   return data;

    

  // })
//  Promise.all([p1,p2]).then((data)=>{
//    console.log(data);

//  })

//  fetch('https://jsonplaceholder.typicode.com/posts').then(response=>console.log(response.json()))
//   console.log('end');


//   async function getValue() {
//     const value=await p1;
//     console.log(value);
    
//   }
// getValue();

// async function getValue2() {
//   const value=await 
//                      fetch('https://jsonplaceholder.typicode.com/posts');
//                      const posts=await value.json();
//   console.log(posts);
  
// }
// getValue2();










